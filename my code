#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;



int main() {
    struct node{
            int size;
            int A[1000];
        };
    int t,h;
    scanf("%d",&t);
    for(h=0;h<t;h++){
        
        int n,e;
        int i,j,k,f,g;
        int leaves = 0;
        int process=0;
        int flag =0;
        int isit = 0;
        int d = 0;  // no of tasks completed
        int check; // 1 for a leaf
        
        scanf("%d",&n);  //vertices
        scanf("%d",&e);  //edges
        
        struct node * b[n];  //table
        int a[n]; //printing order 
        int c[n];  //completed tasks
        
        for(i=0;i<n;i++){
           b[i] = (struct node *)malloc(sizeof(struct node));
            b[i]->size = 0;
      //      b[i] = temp;
            a[i]=i;
            c[i]=0;
        }                       // initialization to zero
        
        for(i=0;i<e;i++){
            scanf("%d",&j);
            scanf("%d",&k);
            if(j>=n||k>=n){
                continue;
            }
            else{
                if(j == k){
                flag = 1;
                }
                g = b[k]->size;
                b[k]->A[g] = j;
                b[k]->size=b[k]->size +1;
            }
            
        }                              // input done
        if(flag==1){
            printf("NO\n");
            flag = 0;
            continue;
        }                  //in case of self task
        else{
            flag = 0;
            for(i=0;i<n;i++){ // delete one leaf in each iteration
                leaves = 0;
                check = 1;
                for(j=0;j<n;j++){
                    if(c[j]==1){
                        continue;
                    }
                    if(b[j]->size==0){          // j is a leaf
                        c[j]=1;   // task j completed
                        a[d]=j;  // task updated
                        d++;
                        leaves++;
                        break;
                    }
                    else {
                        k = b[j]->size; //  #tasks req to do job j
                        for(g=0;g<k;g++){
                            f = b[j]->A[g];
                            if(c[f]==0){
                                check = 0;
                                break;
                            }
                            else  if (c[f]==1){
                                check = 1;
                                continue;
                            }
                        }               // is it a leaf ?
                    if(check==1){
                        c[j]=1;
                        a[d]=j;
                        d++;
                        leaves ++;
                        break;
                    }
                    else{
                       continue; 
                    }
                    
                }
               
            }
            if(leaves>0)continue;
            if (leaves == 0 && d<n){
                   isit =1;  // has a cycle
                   break;
               }
            else if(leaves==0 && d>=n){
                    isit = 0;
                    break;
                }
            }
            if(isit == 1){
                printf("NO\n");
                continue;
            }
            else {
                printf("YES\n");
                for(i=0;i<n;i++){
                    printf("%d ",a[i]);
                }
                printf("\n");
                continue;
            }
        
        }
        
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}
